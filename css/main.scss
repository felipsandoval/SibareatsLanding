$openSans: 'Open Sans', Helvetica, Arial, sans-serif;
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

body {
  //height: 100%; /* Used to enable scrolling */
  font-family: $openSans;
  color: white;
  background-color: #eecf00; /* For browsers that do not support gradients */
  //width: 100%;
  background: linear-gradient(rgba(252,93,81,1) 0%, rgba(238,128,120,1) 64%, rgba(253,193,189,1) 100%);
}

/* This rule ensures that the background gradient covers the entire viewport */
html, body {
  height: 100%;
}

a{
  font-size:1rem;
  font-family: "Arial";
  letter-spacing: -0.4px;
  word-spacing: 0.6px;
  font-weight: 700;
  text-decoration: none;
  font-style: normal;
  font-variant: normal;
  text-transform: uppercase;
}

/* This rule ensures that elements inside the body fill the entire viewport */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

#logo {
  width: 20%;
  cursor: pointer;
}

@media (min-width: 0) and (max-width: 992px) {
  #logo {
    width: 40%;
  }
}

// Buttons

// Animate the size, inside
.fill:hover,
.fill:focus {
  box-shadow: inset 0 0 0 2em var(--hover);
}

// Animate the size, outside
.pulse:hover, 
.pulse:focus {
  animation: pulse 1s;
  box-shadow: 0 0 0 2em transparent;
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 var(--hover); }
}

// Stack multiple shadows, one from the left, the other from the right
.close:hover,
.close:focus {
  box-shadow: 
    inset -3.5em 0 0 0 var(--hover),
    inset 3.5em 0 0 0 var(--hover);  
}

// Size can also be negative; see how it's smaller than the element
.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

// Animating from the bottom
.up:hover,
.up:focus {
  box-shadow: inset 0 -3.25em 0 0 var(--hover);
}

// And from the left
.slide:hover,
.slide:focus {
  box-shadow: inset 6.5em 0 0 0 var(--hover);
}

// Multiple shadows, one on the outside, another on the inside
.offset {  
  box-shadow: 
    0.3em 0.3em 0 0 var(--color),
    inset 0.3em 0.3em 0 0 var(--color);
  
  &:hover,
  &:focus {
    box-shadow: 
      0 0 0 0 var(--hover),
      inset 6em 3.5em 0 0 var(--hover);
  }
}

//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors
$colors: (
  fill: #eecf00,
  pulse: #eecf00, 
  close: #eecf00, 
  raise: #eecf00, 
  up: #eecf00, 
  slide: #eecf00, 
  offset: #eecf00
);

// Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, 10deg)};
  }
}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
button {  
  color: var(--color);
  transition: 0.25s;
  
  &:hover,
  &:focus { 
    border-color: var(--hover);
    color: black;
  }
}

// Basic button styles
button {
  font-family: 'Helvetica', 'Arial', sans-serif;
  border: 2px solid;
  line-height: 1;
  margin: 0.5em;
  padding: 1em 2em;
  font-size: 1em;
  margin-bottom: 20px;
  -webkit-appearance: none;
  background-color: #ec3123;
  color: white;
  border-radius: 4px;
  border: none;
  cursor: pointer;
  font-weight: 700;
  text-decoration: none;
  font-style: normal;
  font-variant: normal;
  text-transform: uppercase;
  //box-shadow: 0 2px 25px rgba(255, 0, 130, 0.5);
}

h1 { font-weight: 400; }

code { 
  color: #e4cb58;
  font: inherit;
}